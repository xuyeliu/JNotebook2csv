ID,Source,Type,Category,Stage
0,"As the name says, all I am doing here is cleaning the data - more specifically, replacing missing values in the training data. The result should be the starting point for further exploration and/or feature engineering. In order to build the actual model, further steps will have to be taken.",markdown,,
1,"# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the ""../input/"" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory

from subprocess import check_output
print(check_output([""ls"", ""../input""]).decode(""utf8""))

# Any results you write to the current directory are saved as output.",code,,
2,"houseprice=pd.read_csv('../input/train.csv')
houseprice.head()",code,,
3,You can already see that there are NaNs in some columns. So let's see where exactly and how many,markdown,,
4,"# To check how many columns have missing values - this can be repeated to see the progress made
def show_missing():
    missing = houseprice.columns[houseprice.isnull().any()].tolist()
    return missing",code,,
5,houseprice[show_missing()].isnull().sum(),code,,
6,"## Data Cleaning Plan
Let's look at these variables in the data dictionary:

* LotFrontage: Linear feet of street connected to property. I can't imagine that this would be 0 (as this would be a property without access), so either impute mean, or maybe see if there's a correlation with LotArea (like square root?).

* Alley: Type of alley access to property -> Many missing values, I would presume that these properties just don't have an alley access.

* MasVnrType/MasVnrArea -> both have 8 values missing, I presume they are the same ones. Either set as ""None""/0 or use most frequent value/median.

* Bsmt... Variables: A  number of variables in connection with the basement. About the same number of missing values. However, there are two basement-related variables without missing values ""BsmtFinSF1"" and ""BsmtFinSF2"" - look at those and then decide what to do with the missing values.

* Electrical: Just one missing value - here just impute most frequent one.

* FireplaceQu: I assume the properties with missing values just don't have a fireplace. There's also the variable Fireplaces (without missing values) - check this and then decide.

* Garage ... Variables: 81 missing in these columns. However, there are some Garage-related variables without missing values: GarageCars, GarageArea - check these and then decide.

* PoolQC - probably no pool - but check against PoolArea (which has no missing values).

* Fence: Many missing values - probably no fence, just impute 'None'

* MiscFeature: Assuming none - probably no special features, just impute 'None'",markdown,,
7,"# Looking at categorical values
def cat_exploration(column):
    return houseprice[column].value_counts()",code,,
8,"# Imputing the missing values
def cat_imputation(column, value):
    houseprice.loc[houseprice[column].isnull(),column] = value",code,,
9,"### LotFrontage/LotArea
A number of values are missing and one possibility would be to just impute the mean. However, there should actually be a correlation with LotArea, which has no missing values.",markdown,,
10,"# check correlation with LotArea
houseprice['LotFrontage'].corr(houseprice['LotArea'])",code,,
11,"Ok, that's not great. I we assume that most lots are rectangular, using the square root might be an improvement. ",markdown,,
12,"# improvement - and good enough for now
houseprice['SqrtLotArea']=np.sqrt(houseprice['LotArea'])
houseprice['LotFrontage'].corr(houseprice['SqrtLotArea'])",code,,
13,"import seaborn as sns
%pylab inline
sns.pairplot(houseprice[['LotFrontage','SqrtLotArea']].dropna())",code,,
14,"cond = houseprice['LotFrontage'].isnull()
houseprice.LotFrontage[cond]=houseprice.SqrtLotArea[cond]",code,,
15,"# This column is not needed anymore
del houseprice['SqrtLotArea']",code,,
16,### Alley,markdown,,
17,cat_exploration('Alley'),code,,
18,"# I assume empty fields here mean no alley access
cat_imputation('Alley','None')",code,,
19,### MasVnr,markdown,,
20,"houseprice[['MasVnrType','MasVnrArea']][houseprice['MasVnrType'].isnull()==True]",code,,
21,"So the missing values for the ""MasVnr..."" Variables are in the same rows.",markdown,,
22,cat_exploration('MasVnrType'),code,,
23,"Since ""None"" is the most frequent value, I will impute ""None"" for the Type, and 0.0 for the area.",markdown,,
24,"cat_imputation('MasVnrType', 'None')
cat_imputation('MasVnrArea', 0.0)",code,,
25,### Basement,markdown,,
26,"basement_cols=['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','BsmtFinSF1','BsmtFinSF2']
houseprice[basement_cols][houseprice['BsmtQual'].isnull()==True]",code,,
27,"So in the cases where the categorical variables are NaN, the numerical ones are 0. Which means there's no basement, so the categorical ones should also be set to ""None"".",markdown,,
28,"for cols in basement_cols:
    if 'FinSF'not in cols:
        cat_imputation(cols,'None')",code,,
29,### Electrical,markdown,,
30,cat_exploration('Electrical'),code,,
31,"# Impute most frequent value
cat_imputation('Electrical','SBrkr')",code,,
32,### Fireplace,markdown,,
33,cat_exploration('FireplaceQu'),code,,
34,I would assume that the 690 just don't have a fireplace. Let's check:,markdown,,
35,houseprice['Fireplaces'][houseprice['FireplaceQu'].isnull()==True].describe(),code,,
36,"cat_imputation('FireplaceQu','None')",code,,
37,"pd.crosstab(houseprice.Fireplaces, houseprice.FireplaceQu)",code,,
38,### Garages,markdown,,
39,"garage_cols=['GarageType','GarageQual','GarageCond','GarageYrBlt','GarageFinish','GarageCars','GarageArea']
houseprice[garage_cols][houseprice['GarageType'].isnull()==True]",code,,
40,"#Garage Imputation
for cols in garage_cols:
    if houseprice[cols].dtype==np.object:
        cat_imputation(cols,'None')
    else:
        cat_imputation(cols, 0)",code,,
41,### Pool,markdown,,
42,cat_exploration('PoolQC'),code,,
43,Many missing values - are they all without a pool?,markdown,,
44,houseprice['PoolArea'][houseprice['PoolQC'].isnull()==True].describe(),code,,
45,"Yes, seems like it - if PoolQC is empty, PoolArea is 0",markdown,,
46,"cat_imputation('PoolQC', 'None')",code,,
47,### Fence,markdown,,
48,"cat_imputation('Fence', 'None')",code,,
49,### MiscFeature,markdown,,
50,"cat_imputation('MiscFeature', 'None')",code,,
51,### Are we done?,markdown,,
52,houseprice[show_missing()].isnull().sum(),code,,
53,"Yes, all missing values are gone!",markdown,,
